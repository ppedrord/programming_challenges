"""

author: Pedro Paulo Monteiro Muniz Barbosa
e-mail: pedropaulommb@gmail.com

Programming Challenges - Tests

"""

import pytest
import foobar_challenges

prime = [(0, '23571'),
         (3, '71113'),
         (10, '19232')]


@pytest.mark.parametrize(["n", "expected"], prime)
def test_solution_prime_numbers(n, expected):
    assert foobar_challenges.solution_prime_numbers(n) == expected

"""
prime_01 = [(0, '23571'),
            (3, '71113'),
            (10, '19232')]


@pytest.mark.parametrize(["n", "expected"], prime_01)
def test_solution_lauro(n, expected):
    assert foobar_challenges.solution(n) == expected


prime_02 = [(0, '23571'),
            (3, '71113'),
            (10, '19232')]


@pytest.mark.parametrize(["n", "expected"], prime_02)
def test_solution(n, expected):
    assert foobar_challenges.solution(n) == expected"""


panels = [([2, 0, 2, 2, 0], '8'),
          ([-2, -3, 4, -5], '60'),
          ([1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
            1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
            1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],
          '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),
          ([-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
            -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
            -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
            -1000, -1000, -1000, -1000, -1000],
          '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'),
          ([-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
            -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
            -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
            -1000, -1000, -1000, -1000, 1000],
           '999999999999999977996382405657660174364823889467801080772253244969263939229107492426926049423260513969768268415537077468838432306731146395363835904'),
          ([-1, 0, 0, 0, 0, 0], '0'),
          ([-5], '-5')]


@pytest.mark.parametrize(["solar_panels", "expected"], panels)
def test_power_hungry_solution(solar_panels, expected):
    assert foobar_challenges.power_hungry_solution(solar_panels) == expected


